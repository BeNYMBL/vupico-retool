id: triggerImport
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: >-
        // This is the wonderful if statement we use to determine which import
        query should be ran.


        // The table for the importer must be specified as a urlparam `table`
        (ie table === 'country')

        // Therefore, to have this set correctly you must bind into the page
        with the table name EXACTLY as it is in postgres.


        // If you wish to add a new table to the importer, you must

        // 1. Create the new query for this table (importQueries folder)

        // 2. Add the if statement for the table here.


        const tableToLoad = urlparams.table


        if(tableToLoad === 'country') {
          insCountry.trigger()
        }


        if(tableToLoad === 'material') {
          insMaterialPef.trigger()
        }


        if(tableToLoad === 'country_distance') {
          insMaterialPef.trigger()
        }


        if(tableToLoad === 'material_distribution') {
          insMaterialPef.trigger()
        }


        if(tableToLoad === 'country_material_factor') {
          insMaterialPef.trigger()
        }


        if(tableToLoad === 'currency_conversion') {
          insMaterialPef.trigger()
        }


        if(tableToLoad === 'epr_taxing') {
          insMaterialPef.trigger()
        }


        if(tableToLoad === 'epr_classification') {
          insMaterialPef.trigger()
        }


        if(tableToLoad === 'electricity_pef') {
          insMaterialPef.trigger()
        }


        if(tableToLoad === 'material_lifestage') {
          insMaterialPef.trigger()
        }


        if(tableToLoad === 'material_pef') {
          insMaterialPef.trigger()
        }


        //console.log('tableToLoad',tableToLoad.table)

        //tableToLoad.query()
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2023-01-27T13:51:14.847Z
