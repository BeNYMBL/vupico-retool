id: getElements
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: >-
        const projectReportData = getProjectReport.data &&
        formatDataAsArray(getProjectReport.data)



        if(projectReportData) {
          return projectReportData[0].project_report_data.element
        }



        const data = getComponents.data;

        console.log('data',  data);



        // // Get Levels Depth of Tree

        // const allLevels = data.map((val) => {

        //   return val.level

        // })


        // // Get a unique list of levels in descending order

        // const uniqueLevels = _.uniq(allLevels).sort();

        // // console.log('uniqueLevels', uniqueLevels);


        const elements = data.filter(row => row.child_id == null)
              //_.filter(data, ['level', _.last(uniqueLevels)]);
        console.log('elements',  elements);


        const final = elements.map((val, counter) => {
          let a = parseFloat(val.quantity);
          let id = val.parent_component_id
          let bomString = []

          for(i = val.level - 1; i >= 0; i--) {
            // console.log('i = ',i)
            // console.log('a = ',a)
            
            let parentComponent = data.find(x => x.id === id)
            
            console.log('parentComponent', parentComponent)
            let parentComponentQuantity = parseFloat(parentComponent?.quantity || 0 )
            // console.log('id = ', id);
            // console.log('parent id = ', parentComponent?.parentcomponentid);
            // console.log('parent quantity = ',parentComponentQuantity)
            
            if(parentComponent && parentComponent.material_name && parentComponent.material_code) {
             bomString.push({'materialName': parentComponent.material_name, 'elementName': parentComponent.material_code, 'level': parentComponent.level, 'elementIndex': counter, 'sort': counter + '_' + parentComponent.level})
            }
            
            
            
            
            if(parentComponent && parentComponent.id == id) {
                  a = a * parentComponentQuantity
                  id = parentComponent?.parent_component_id;
            }
          }
          return {
            element: val.material_id,
            quantity: a,
            unit_of_measure: val.unit_of_measure,
            elementGroup: val.global_element_id,
            materialName: val.material_name,
            bomString: bomString,
            elementIndex: counter,
            level: val.level,
            elementName: val.material_code
          };
        })


        return final;
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-10-28T19:31:02.398Z
folder: calculateElements
