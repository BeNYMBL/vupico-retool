id: getElements
type: datasource
subtype: JavascriptQuery
resourceName: JavascriptQuery
template:
  ordered:
    - queryRefreshTime: ''
    - lastReceivedFromResourceAt: null
    - queryDisabledMessage: ''
    - successMessage: ''
    - queryDisabled: ''
    - playgroundQuerySaveId: latest
    - resourceNameOverride: ''
    - runWhenModelUpdates: false
    - showFailureToaster: true
    - query: >-
        const data = getComponentElements.data;




        const final = data.map((val) => {
          let a = parseFloat(val.quantity);
          let id = val.parent_component_id

          for(i = val.level - 1; i >= 0; i--) {
            let parentComponent = data.find(x => x.id === id)
            let parentComponentQuantity = parseFloat(parentComponent?.quantity || 0 )
            
            if(parentComponent && parentComponent.id == id) {
                  a = a * parentComponentQuantity
                  id = parentComponent?.parentcomponentid;
            }
          }
          return {
            material: val.material_name,
            material_id: val.material_id,
            //element: val.id,
            elementGroup: val.global_element_id,
            quantity: a,
            weight_uom: val.uom,
            material_code: val.material_code,
            material_global_code: val.global_element_id
          };
        })



        const finalReduced = final.reduce((acc, obj) => {
          const existingObject = acc.find(o => o.material_code === obj.material_code)
          
          if (existingObject) {
            existingObject.quantity += obj.quantity
          } else {
            acc.push(obj)
          }
          
          return acc
        }, [])


        //return final (old way of doing this)

        return finalReduced; // Way of calculating final which accounts for the
        same material existing on multiple levels
    - playgroundQueryUuid: ''
    - playgroundQueryId: null
    - error: null
    - privateParams: []
    - runWhenPageLoadsDelay: ''
    - data: null
    - importedQueryInputs:
        ordered: []
    - isImported: false
    - showSuccessToaster: true
    - cacheKeyTtl: ''
    - metadata: null
    - changesetObject: ''
    - errorTransformer: >-
        // The variable 'data' allows you to reference the request's data in the
        transformer. 

        // example: return data.find(element => element.isError)

        return data.error
    - confirmationMessage: null
    - isFetching: false
    - changeset: ''
    - rawData: null
    - queryTriggerDelay: '0'
    - resourceTypeOverride: null
    - watchedParams: []
    - enableErrorTransformer: false
    - showLatestVersionUpdatedWarning: false
    - timestamp: 0
    - importedQueryDefaults:
        ordered: []
    - enableTransformer: false
    - showUpdateSetValueDynamicallyToggle: true
    - runWhenPageLoads: false
    - transformer: >-
        // type your code here

        // example: return formatDataAsArray(data).filter(row => row.quantity >
        20)

        return data
    - events: []
    - queryTimeout: '10000'
    - requireConfirmation: false
    - queryFailureConditions: ''
    - changesetIsObject: false
    - enableCaching: false
    - allowedGroups: []
    - queryThrottleTime: '750'
    - updateSetValueDynamically: false
    - notificationDuration: ''
createdAt: 2022-12-16T01:08:57.800Z
folder: Start_Simulation
